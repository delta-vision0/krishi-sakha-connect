import React, { useState } from 'react';
import { Camera, Upload, Zap, Leaf, Shield, Loader2, AlertCircle } from 'lucide-react';
import { analyzePlantDisease, DiseaseAnalysisResult } from '@/services/pestDiseaseAnalysis';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface PestDetectionProps {
  onOpenGemini: (diseaseContext?: {
    diseaseName: string;
    plantName: string;
    confidence: number;
  }) => void;
}

export const PestDetection = ({ onOpenGemini }: PestDetectionProps) => {
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [plantName, setPlantName] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [analysisResult, setAnalysisResult] = useState<DiseaseAnalysisResult | null>(null);

  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Reset states
    setError(null);
    setDetectionResult(null);
    setShowResult(false);
    setIsLoading(true);

    try {
      // Convert file to base64
      const base64 = await fileToBase64(file);
      
      // Display the image
      const reader = new FileReader();
      reader.onload = (e) => {
        setSelectedImage(e.target?.result as string);
      };
      reader.readAsDataURL(file);

      // Call Gemini API for disease detection
      const result = await GeminiService.detectPlantDisease(base64, file.type);

      setDetectionResult(result);
      setShowResult(true);
    } catch (err: unknown) {
      setError(err instanceof Error ? err.message : 'Failed to analyze the image. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const getOrganicSolutions = () => {
    if (detectionResult && detectionResult.diseases.length > 0) {
      return detectionResult.diseases[0].treatment.organic;
    }
    return [
      "Spray neem oil solution (2-3ml per liter water)",
      "Apply copper fungicide early morning",
      "Remove affected leaves and destroy them",
      "Improve air circulation around plants",
      "Avoid overhead watering"
    ];
  };

  const getChemicalSolutions = () => {
    if (detectionResult && detectionResult.diseases.length > 0) {
      return detectionResult.diseases[0].treatment.chemical;
    }
    return [
      "Apply Mancozeb 75% WP @ 2g/liter",
      "Use Copper Oxychloride 50% WP @ 3g/liter", 
      "Spray Metalaxyl + Mancozeb @ 2.5g/liter",
      "Apply in evening hours for better effectiveness",
      "Repeat application after 10-15 days if needed"
    ];
  };

  return (
    <div id="pest-detect" className="space-y-6 fade-in">
      <div className="krishi-card">
        <div className="flex items-center gap-3 mb-6">
          <div className="w-12 h-12 bg-primary/10 rounded-xl flex items-center justify-center">
            <Camera className="w-6 h-6 text-primary" />
          </div>
          <div>
            <h2 className="heading-3">Pest & Disease Scanner</h2>
            <p className="caption">Upload a photo to detect plant diseases instantly</p>
          </div>
        </div>

        {!selectedImage ? (
          <div className="text-center">
            <div className="border-2 border-dashed border-border rounded-xl p-8 mb-4 hover:border-primary/50 transition-colors">
              <Upload className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <p className="body-text text-muted-foreground mb-4">
                Take a clear photo of the affected leaf or plant part
              </p>
              <label className="btn-primary cursor-pointer inline-flex items-center gap-2">
                <Camera size={20} />
                Upload Leaf Photo
                <input 
                  type="file" 
                  accept="image/*" 
                  onChange={handleImageUpload}
                  className="hidden"
                />
              </label>
            </div>
          </div>
        ) : (
          <div>
            <div className="relative mb-4">
              <img 
                src={selectedImage} 
                alt="Uploaded leaf" 
                className="w-full h-64 object-cover rounded-xl"
              />
              {isLoading && (
                <div className="absolute inset-0 bg-black/50 rounded-xl flex items-center justify-center">
                  <div className="text-white text-center">
                    <Loader2 className="w-8 h-8 animate-spin mx-auto mb-2" />
                    <p>Analyzing image with Gemini AI...</p>
                  </div>
                </div>
              )}
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-xl p-4 mb-4">
                <div className="flex items-center gap-2 mb-2">
                  <AlertCircle className="w-5 h-5 text-red-600" />
                  <h3 className="font-bold text-lg text-red-800">Analysis Failed</h3>
                </div>
                <p className="text-red-700">{error}</p>
              </div>
            )}

            {showResult && detectionResult && (
              <div className="space-y-4 slide-up">
                <div className={`${detectionResult.isHealthy ? 'bg-green-50 border-green-200' : 'bg-danger/10 border-danger/20'} border rounded-xl p-4`}>
                  <div className="flex items-center justify-between mb-2">
                    <h3 className="font-bold text-lg">
                      {detectionResult.plantName}
                      {detectionResult.scientificName && (
                        <span className="text-sm font-normal text-gray-600 ml-2">
                          ({detectionResult.scientificName})
                        </span>
                      )}
                    </h3>
                    <span className={`${detectionResult.isHealthy ? 'status-success' : 'status-warning'}`}>
                      {detectionResult.confidence}% Confident
                    </span>
                  </div>
                  
                  <div className="mb-3">
                    {detectionResult.family && (
                      <p className="text-sm text-gray-600 mb-1">
                        <strong>Family:</strong> {detectionResult.family}
                      </p>
                    )}
                    {detectionResult.plantDetails.commonNames.length > 0 && (
                      <p className="text-sm text-gray-600 mb-1">
                        <strong>Common names:</strong> {detectionResult.plantDetails.commonNames.join(', ')}
                      </p>
                    )}
                  </div>

                  <p className="caption">
                    {detectionResult.isHealthy 
                      ? 'Plant appears to be healthy! No major diseases detected.'
                      : `Plant health issues detected. ${detectionResult.diseases.length} potential disease(s) identified.`
                    }
                  </p>

                  {detectionResult.diseases.length > 0 && (
                    <div className="mt-3">
                      <h4 className="font-semibold text-sm mb-2">Detected Issues:</h4>
                      <div className="space-y-2">
                        {detectionResult.diseases.map((disease, index) => (
                          <div key={index} className="bg-red-100 border border-red-200 rounded-lg p-2">
                            <div className="flex justify-between items-center">
                              <span className="font-medium text-sm">{disease.name}</span>
                              <span className="text-xs bg-red-200 text-red-800 px-2 py-1 rounded">
                                {disease.probability}% match
                              </span>
                            </div>
                            <p className="text-xs text-gray-600 mt-1">{disease.description}</p>
                            {disease.symptoms.length > 0 && (
                              <div className="mt-2">
                                <p className="text-xs font-medium text-gray-700">Symptoms:</p>
                                <ul className="text-xs text-gray-600 list-disc list-inside">
                                  {disease.symptoms.map((symptom, i) => (
                                    <li key={i}>{symptom}</li>
                                  ))}
                                </ul>
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="bg-white border border-border rounded-xl overflow-hidden">
                  <div className="flex border-b border-border">
                    <button 
                      onClick={() => setActiveTab('organic')}
                      className={`flex-1 px-4 py-3 font-medium transition-colors ${
                        activeTab === 'organic' 
                          ? 'bg-primary text-white' 
                          : 'text-muted-foreground hover:text-foreground'
                      }`}
                    >
                      <Leaf className="w-4 h-4 inline mr-2" />
                      Organic Solutions
                    </button>
                    <button 
                      onClick={() => setActiveTab('chemical')}
                      className={`flex-1 px-4 py-3 font-medium transition-colors ${
                        activeTab === 'chemical' 
                          ? 'bg-primary text-white' 
                          : 'text-muted-foreground hover:text-foreground'
                      }`}
                    >
                      <Shield className="w-4 h-4 inline mr-2" />
                      Chemical Solutions
                    </button>
                  </div>
                  
                  <div className="p-4">
                    <ol className="space-y-2">
                      {(activeTab === 'organic' ? getOrganicSolutions() : getChemicalSolutions()).map((solution, index) => (
                        <li key={index} className="flex items-start gap-3">
                          <span className="w-6 h-6 bg-primary/10 text-primary rounded-full flex items-center justify-center text-sm font-medium flex-shrink-0 mt-0.5">
                            {index + 1}
                          </span>
                          <span className="body-text">{solution}</span>
                        </li>
                      ))}
                    </ol>
                  </div>
                </div>

                <button 
                  onClick={() => {
                    if (detectionResult && detectionResult.diseases.length > 0) {
                      // Pass the first detected disease to Gemini
                      onOpenGemini({
                        diseaseName: detectionResult.diseases[0].name,
                        plantName: detectionResult.plantName,
                        confidence: detectionResult.diseases[0].probability
                      });
                    } else {
                      // No diseases detected, open general Gemini
                      onOpenGemini();
                    }
                  }}
                  className="w-full btn-primary flex items-center justify-center gap-2"
                >
                  <Zap size={20} />
                  Ask Gemini for More Details
                </button>

                <button 
                  onClick={() => {
                    setSelectedImage(null);
                    setShowResult(false);
                    setDetectionResult(null);
                    setError(null);
                  }}
                  className="w-full px-4 py-2 border border-border rounded-lg hover:bg-accent transition-colors"
                >
                  Scan Another Plant
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};